name: Release
on:
  workflow_dispatch:
  # push:
  #   branches: [ main ]

jobs:
  release:
    permissions:
      contents: write
      packages: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      - name: 'Set up Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: 23
          registry-url: https://registry.npmjs.org/

      - name: 'Install dependencies'
        run: npm install

      - name: 'Build, bundle, compress'
        run: npm exec -c ./scripts/build.sh

      - name: 'Check if code follows JSR rules for packages'
        run: npx jsr publish --dry-run

      - name: 'Check if code passes tests'
        run: npm run test-once

      - name: 'Extract package info from package.json'
        id: package_info
        run: |
          version=$(jq -r '.version' package.json)
          name=$(jq -r '.name' package.json)
          expected_package_archive_name=$name-$version.tgz
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "name=$name" >> $GITHUB_OUTPUT
          echo "expected_package_archive_name=$expected_package_archive_name" >> $GITHUB_OUTPUT

      - name: 'Create package archive'
        run: npm pack

      - name: 'Publish to default NPM registry'
        run: |
          npm publish ${{ steps.package_info.outputs.expected_package_archive_name }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}

      - name: 'Prepare deno.json for publishing to JSR'
        run: |
          jq '.version = ${{ steps.package_info.outputs.version }}' deno.json > _ && mv _ deno.json
          npx prettier deno.json --write

      - name: 'Commit updated deno.json after npm install'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_author: 'nikelborm <evadev@duck.com>'
          file_pattern: 'deno.json'
          commit_message: Auto-updated NPM package files

      - name: 'Publish to JSR'
        run: npx jsr publish

      - name: "Prepare package.json for publishing to GitHub's NPM registry"
        run: |
          jq '.name = "@nikelborm/" + .name' package.json > _ && mv _ package.json

      - name: "Publish to GitHub's NPM registry"
        run: |
          sed -i 's/registry.npmjs.org/npm.pkg.github.com/' /home/runner/work/_temp/.npmrc
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Upload bundled CLI as a release artifact'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: experiment-${{ steps.package_info.outputs.version }}
          fail_on_unmatched_files: true
          prerelease: true
          files: |
            ${{ steps.package_info.outputs.expected_package_archive_name }}
            ./dist/minified/${{ steps.package_info.outputs.name }}.js
            ./template.env
          body: |
            # Yay! ðŸŽ‰

            ## Files in this release

            - `${{ steps.package_info.outputs.expected_package_archive_name }}` contains package archive which was published to NPM
            - `${{ steps.package_info.outputs.name }}.js` contains a light js CLI script with inlined dependencies that allow you to avoid using any package managers
            - `template.env` has all env variables that are supported by this script

            ## Usage

            ### Invoke immediately

            If you already know the supported arguments (e.g. `--help` to print all supported arguments of the script), you can pipe the script to node directly and pass them after `node -`:

            ```bash
            curl -sL https://github.com/nikelborm/${{ steps.package_info.outputs.name }}/releases/download/${{ steps.package_info.outputs.version }}/${{ steps.package_info.outputs.name }}.js | node - --repoOwner apache --repoName superset
            ```

            The script also supports interactive mode, where you will be asked to pass arguments sequentially and interactively. Since it requires user input, it can't be piped and needs to be saved to a temporary file:

            ```bash
            tmp_js=$(mktemp --suffix .js) && \
            curl -sLo $tmp_js https://github.com/nikelborm/${{ steps.package_info.outputs.name }}/releases/download/${{ steps.package_info.outputs.version }}/${{ steps.package_info.outputs.name }}.js && \
            node $tmp_js --wizard && \
            rm $tmp_js
            ```

            ### Install into the system directly

            Running this:

            ```bash
            sudo curl -sLo /usr/bin/${{ steps.package_info.outputs.name }} https://github.com/nikelborm/${{ steps.package_info.outputs.name }}/releases/download/${{ steps.package_info.outputs.version }}/${{ steps.package_info.outputs.name }}.js
            sudo chmod +x /usr/bin/${{ steps.package_info.outputs.name }}
            ```

            ...will allow you to use the script like this later:

            ```bash
            ${{ steps.package_info.outputs.name }} --repoOwner apache --repoName superset
            ```
